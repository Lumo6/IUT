SET GLOBAL event_scheduler = "ON";

DROP TABLE IF EXISTS Domaines;
CREATE TABLE Domaines (
    id_domaine INT,
    nom VARCHAR(20) NOT NULL,
    CONSTRAINT Pk_id_domaine PRIMARY KEY(ID_DOMAINE)
);

DROP TABLE IF EXISTS Threads;
CREATE TABLE Threads (
    id_threads INT,
    date_crea DATE NOT NULL,
    nb_posts INT DEFAULT 1,
    nb_consult INT DEFAULT 0,
    domaine INT NOT NULL,
    CONSTRAINT Pk_id_threads PRIMARY KEY (id_threads),
    CONSTRAINT Fk_domaine FOREIGN KEY (domaine) REFERENCES Domaines(id_domaine)
);

DROP TABLE IF EXISTS Classes;
CREATE TABLE Classes (
    id_classe INT,
    titre VARCHAR(20) NOT NULL,
    descrip TEXT NOT NULL,
    CONSTRAINT Pk_id_classe PRIMARY KEY (id_classe)
);

DROP TABLE IF EXISTS APPRENANTS;
CREATE TABLE Apprenants (
    idApp INT,
    nomApp VARCHAR(55) NOT NULL,
    noteApp INT DEFAULT NULL,
    NoteConn INT DEFAULT NULL,
    CONSTRAINT PK_App PRIMARY KEY (idApp)
);

DROP TABLE IF EXISTS FORMATEURS;
CREATE TABLE Formateurs (
    idFor INT,
    nomFor VARCHAR(55) NOT NULL,
    CONSTRAINT PK_App PRIMARY KEY (idFor)
);

DROP TABLE IF EXISTS POSTS;
CREATE TABLE POSTS (
    ID_POST INT,
    DATE_POST DATE NOT NULL,
    TITRE_POST VARCHAR(20) NOT NULL,
    TEXTE TEXT NOT NULL,
    THREADS INT,
    id_app INT,
    id_for INT,
    CONSTRAINT PK_ID_POST PRIMARY KEY (ID_POST),
    CONSTRAINT FK_THREADS FOREIGN KEY (THREADS) REFERENCES THREADS(ID_THREADS),
    CONSTRAINT Fk_ID_APP FOREIGN KEY (id_app) REFERENCES Apprenants(idAPP),
    CONSTRAINT Fk_ID_FOR FOREIGN KEY (id_for) REFERENCES Formateurs(id_for),
    CONSTRAINT CHECK_app_for CHECK((id_app IS NOT NULL AND id_for IS NULL) OR (id_app IS NULL AND id_for IS NOT NULL))
);

DROP TABLE IF EXISTS QUESTIONNAIRES;
CREATE TABLE QUESTIONNAIRES (
    ID_Q INT,
    NOM_Q VARCHAR(55) NOT NULL,
    DATE_Q DATE NOT NULL,
    DUREE_Q INT NOT NULL,
    FORMATEUR INT,
    CONSTRAINT PK_Q PRIMARY KEY (ID_Q),
    CONSTRAINT Fk_id_formateur FOREIGN KEY (FORMATEUR) REFERENCES Formateurs(idFor)
);

DROP TABLE IF EXISTS REPONSES;
CREATE TABLE REPONSES (
    idRep INT, 
    textRep TEXT NOT NULL,
    bonneRep INT NOT NULL,
    question INT,
    CONSTRAINT PK_idRep PRIMARY KEY (IDREP),
    CONSTRAINT Fk_question FOREIGN KEY (question) REFERENCES Questions(ID_QUESTION)
);

DROP TABLE IF EXISTS QUEST_APPS;
CREATE TABLE QUEST_APPS (
    id_Q_app INT,
    appreciation TEXT NOT NULL,
    noteAppQ INT NOT NULL,
    Termine BOOLEAN DEFAULT 0 NOT NULL,
    id_questionnaire INT,
    id_app INT,
    CONSTRAINT PK_id_Q_app PRIMARY KEY (QUEST_APPS),
    CONSTRAINT FK_id_questionnaire FOREIGN KEY (ID_QUESTIONNAIRE) REFERENCES Questionnaires(id_Q),
    CONSTRAINT FK_ID_APP FOREIGN KEY (ID_APP) REFERENCES Apprenants(idApp)
);

DROP TABLE IF EXISTS QUESTIONS;
CREATE TABLE
 QUESTIONS (
    id_question INT,
    question TEXT NOT NULL,
    domaine INT,
    formateur INT,
    CONSTRAINT PK_ID_QUESTION PRIMARY KEY (ID_QUESTION),
    CONSTRAINT Fk_id_domaine FOREIGN KEY (domaine) REFERENCES Domaines(ID_DOMAINE),
    CONSTRAINT Fk_id_formateur FOREIGN KEY (FORMATEUR) REFERENCES Formateurs(idFor)
);

DROP TABLE IF EXISTS Composer;
CREATE TABLE Composer (
    id_question INT,
    id_questionnaire INT,
    CONSTRAINT PK_ID_QUESTION_QUESTIONNAIRE PRIMARY KEY (ID_QUESTION, ID_QUESTIONNAIRE),
    CONSTRAINT Fk_ID_QUESTION FOREIGN KEY (ID_QUESTION) REFERENCES Questions(id_question),
    CONSTRAINT FK_ID_QUESTIONNAIRE FOREIGN KEY (ID_QUESTIONNAIRE) REFERENCES QUESTIONNAIRES(ID_Q)
);

DROP TABLE IF EXISTS Repondre;
CREATE TABLE REPONDRE (
    ID_QUESTIONNAIRE INT,
    ID_APP INT,
    ID_QUESTION_APP INT,
    ID_REP INT,
    CONSTRAINT FK_ID_QUESTIONNAIRE FOREIGN KEY (ID_QUESTIONNAIRE) REFERENCES QUESTIONNAIRES(ID_Q),
    CONSTRAINT FK_ID_APP FOREIGN KEY (ID_APP) REFERENCES APPRENANTS(idApp),
    CONSTRAINT FK_ID_QUESTION_APP FOREIGN KEY (ID_QUESTION_APP) REFERENCES QUEST_APPS(ID_QUESTION_APP),
    CONSTRAINT FK_ID_REP FOREIGN KEY (ID_REP) REFERENCES REPONSES(idRep),
    CONSTRAINT Pk_ID_REP PRIMARY KEY (ID_QUESTIONNAIRE,ID_APP,ID_QUESTION_APP,ID_REP)
);

DROP TABLE IF EXISTS APPARTENIRCLASS;
CREATE TABLE AppartenirClass (
    id_Class INT,
    idApp INT,
    CONSTRAINT PK_AppClass_class PRIMARY KEY (id_Class),
    CONSTRAINT PK_AppClass_app PRIMARY KEY (idApp),
    CONSTRAINT FK_AppClass_class FOREIGN KEY (id_Class) REFERENCES Classes(id_Class),
    CONSTRAINT FK_AppClass_app FOREIGN KEY (idApp) REFERENCES Apprenants(idApp)
);

DROP FUNCTION IF EXISTS PrctTermine;
DELIMITER $$
CREATE FUNCTION PrctTermine(id_Q_app INT)
RETURNS INT 
BEGIN
    DECLARE Pourc INT;
    DECLARE REP INT;
    DECLARE TOTAL INT;
    SET REP = (SELECT COUNT(DISTINCT ID_QUESTION_APP) FROM Repondre
                NATURAL JOIN QUEST_APPS
                INNER JOIN REPONSES ON idRep = id_rep
                WHERE ID_QUESTION_APP = id_Q_app);
    SET TOTAL = (SELECT COUNT(DISTINCT id_question) FROM Composer
                INNER JOIN QUESTIONNAIRES ON ID_Q = ID_QUESTIONNAIRE
                INNER JOIN QUEST_APPS ON id_questionnaire = id_Q
                WHERE ID_QUESTION_APP = id_Q_app ;
    SET Pourc = REP / TOTAL;
    RETURN Pourc;
END $$
DELIMITER ;

DROP FUNCTION IF EXISTS SuccesQuestionnaire
DELIMITER $$
CREATE FUNCTION SuccesQuestionnaire(IdQuest INT)
RETURNS INT;
BEGIN
    DECLARE NB INT;
    SET NB = (SELECT COUNT(DISTINCT ID_APP) FROM REPONDRE);
END $$
DELIMITER ;

DROP FUNCTION IF EXISTS NoteQuestionnaire
DELIMITER $$
CREATE FUNCTION NoteQuestionnaire(ID_Q_APP_Select INT)
RETURNS INT
BEGIN
    DECLARE Note INT;
    SET Note = (SELECT noteAppQ FROM QUEST_APPS 
    WHERE ID_Q_APP = ID_Q_APP_Select);
END $$
DEMILITER ;

DELIMITER $$
CREATE OR REPLACE PROCEDURE CalculNotesApp (IN idApp INT,OUT NoteConn INT, OUT noteApp INT)
BEGIN
    DECLARE SNoteConn
    DECLARE SNoteApp
    DECLARE NBNoteApp
    DECLARE NBNoteConn
    SET SNoteConn = (SELECT SUM(noteAppQ) FROM QUEST_APPS INNER JOIN QUESTIONNAIRES ON id_Q = ID_QUESTIONNAIRE WHERE DUREE_Q <> 240);
    SET SNoteApp = (SELECT SUM(noteAppQ) FROM QUEST_APPS INNER JOIN QUESTIONNAIRES ON id_Q = ID_QUESTIONNAIRE WHERE DUREE_Q = 240);
    SET NBNoteApp = (SELECT COUNT(noteAppQ) FROM QUEST_APPS INNER JOIN QUESTIONNAIRES ON id_Q = ID_QUESTIONNAIRE WHERE DUREE_Q <> 240);
    SET NBNoteApp = (SELECT COUNT(noteAppQ) FROM QUEST_APPS INNER JOIN QUESTIONNAIRES ON id_Q = ID_QUESTIONNAIRE WHERE DUREE_Q = 240);
    SET NoteConn = SNoteConn / NBNoteConn;
    SET noteApp = SNoteConn / NBNoteApp;
END $$
DELIMITER ;

DELIMITER $$

CREATE TRIGGER VerifierInsertionRÃ©ponse
AFTER INSERT ON REPONSES
FOR EACH ROW
BEGIN
    DECLARE id_Q_app_check INT;
    DECLARE Termine_check BOOLEAN;
    DECLARE Pourc FLOAT;
    
    SET id_Q_app_check = (SELECT id_questionnaire FROM QUEST_APPS WHERE id_Q_app = NEW.question);
    
    IF id_Q_app_check IS NOT NULL THEN

        SELECT Termine INTO Termine_check FROM QUEST_APPS WHERE id_Q_app = id_Q_app_check;
        
        IF Termine_check = 0 THEN

            SET Pourc = PrctTermine(id_Q_app_check);
            
            IF Pourc = 100 THEN

                UPDATE QUEST_APPS SET Termine = 1 WHERE id_Q_app = id_Q_app_check;
                
                
                IF (SELECT DUREE_JOURS_Q FROM QUESTIONNAIRES WHERE id_Q_app_check = id_questionnaire) <> 30 THEN
                    CALL NoteQuestionnaire(id_Q_app_check);
                END IF;
            END IF;
        END IF;
    END IF;
END$$

DELIMITER ;